{
  "version": 3,
  "sources": ["../../../src/helpers/Validator/index.ts"],
  "sourcesContent": ["import Joi, { Schema, ValidationErrorItem } from \"joi\";\n\nexport class ValidationException extends Error {\n    errors: Array<{ error: string; message: string; code: number }>;\n    status: number;\n  \n    constructor(errors: Array<{ error: string; message: string; code: number }>, status: number = 400) {\n      super('Validation failed');\n      this.errors = errors;\n      this.status = status;  \n      this.message = JSON.stringify(errors); \n    }\n  }\n  \n  export class Validator {\n    static validate<T>(data: T, schema: Schema<T>): T {\n      const { error } = schema.validate(data, { abortEarly: false });\n  \n      if (error) {\n        const errors: Array<{ error: string; message: string; code: number }> = [];\n  \n        error.details.forEach((detail: ValidationErrorItem) => {\n          if (detail.context && detail.context.key) {\n            const key = detail.context.key;\n            errors.push({ error: key, message: detail.message, code: 422 });\n          }\n        });\n  \n        throw new ValidationException(errors);\n      }\n  \n      return data;\n    }\n  }\n  "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,MAAM,4BAA4B,MAAM;AAAA,EAC3C;AAAA,EACA;AAAA,EAEA,YAAY,QAAiE,SAAiB,KAAK;AACjG,UAAM,mBAAmB;AACzB,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,UAAU,KAAK,UAAU,MAAM;AAAA,EACtC;AACF;AAEO,MAAM,UAAU;AAAA,EACrB,OAAO,SAAY,MAAS,QAAsB;AAChD,UAAM,EAAE,MAAM,IAAI,OAAO,SAAS,MAAM,EAAE,YAAY,MAAM,CAAC;AAE7D,QAAI,OAAO;AACT,YAAM,SAAkE,CAAC;AAEzE,YAAM,QAAQ,QAAQ,CAAC,WAAgC;AACrD,YAAI,OAAO,WAAW,OAAO,QAAQ,KAAK;AACxC,gBAAM,MAAM,OAAO,QAAQ;AAC3B,iBAAO,KAAK,EAAE,OAAO,KAAK,SAAS,OAAO,SAAS,MAAM,IAAI,CAAC;AAAA,QAChE;AAAA,MACF,CAAC;AAED,YAAM,IAAI,oBAAoB,MAAM;AAAA,IACtC;AAEA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
