{
  "version": 3,
  "sources": ["../../../src/helpers/Validator/index.ts"],
  "sourcesContent": ["import { Schema, ValidationErrorItem } from \"joi\";\n\nexport class ValidationException extends Error {\n  errors: Array<{ error: string; message: string }>;\n  status: number;\n\n  constructor(errors: Array<{ error: string; message: string }>, status: number) {\n    super('Validation failed');\n    this.errors = errors;\n    this.status = status;\n    this.message = JSON.stringify(errors);\n  }\n\n  toResponseObject() {\n    return {\n      errors: this.errors.map(({ error, message }) => ({ error, message })),\n    };\n  }\n}\n\nexport class Validator {\n  static validate<T>(data: T, schema: Schema<T>): T {\n    const { error } = schema.validate(data, { abortEarly: false });\n\n    if (error) {\n      const errors: Array<{ error: string; message: string }> = [];\n\n      error.details.forEach((detail: ValidationErrorItem) => {\n        if (detail.context && detail.context.key) {\n          const key = detail.context.key;\n          errors.push({ error: key, message: detail.message });\n        }\n      });\n      throw new ValidationException(errors, 422);\n\n    }\n\n    return data;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,MAAM,4BAA4B,MAAM;AAAA,EAC7C;AAAA,EACA;AAAA,EAEA,YAAY,QAAmD,QAAgB;AAC7E,UAAM,mBAAmB;AACzB,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,UAAU,KAAK,UAAU,MAAM;AAAA,EACtC;AAAA,EAEA,mBAAmB;AACjB,WAAO;AAAA,MACL,QAAQ,KAAK,OAAO,IAAI,CAAC,EAAE,OAAO,QAAQ,OAAO,EAAE,OAAO,QAAQ,EAAE;AAAA,IACtE;AAAA,EACF;AACF;AAEO,MAAM,UAAU;AAAA,EACrB,OAAO,SAAY,MAAS,QAAsB;AAChD,UAAM,EAAE,MAAM,IAAI,OAAO,SAAS,MAAM,EAAE,YAAY,MAAM,CAAC;AAE7D,QAAI,OAAO;AACT,YAAM,SAAoD,CAAC;AAE3D,YAAM,QAAQ,QAAQ,CAAC,WAAgC;AACrD,YAAI,OAAO,WAAW,OAAO,QAAQ,KAAK;AACxC,gBAAM,MAAM,OAAO,QAAQ;AAC3B,iBAAO,KAAK,EAAE,OAAO,KAAK,SAAS,OAAO,QAAQ,CAAC;AAAA,QACrD;AAAA,MACF,CAAC;AACD,YAAM,IAAI,oBAAoB,QAAQ,GAAG;AAAA,IAE3C;AAEA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
