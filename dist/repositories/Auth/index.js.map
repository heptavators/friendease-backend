{
  "version": 3,
  "sources": ["../../../src/repositories/Auth/index.ts"],
  "sourcesContent": ["import { RegisterRequest } from \"../../domains/web/Auth/RegisterRequest\";\nimport { AuthModel } from \"../../domains/model/Auth\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { EditDeviceTokenRequest } from \"../../domains/web/Auth/EditDeviceTokenRequest\";\nimport { EditProfileRequest } from \"../../domains/web/Auth/EditProfileRequest\";\n\nexport class AuthRepository{\n\n    async findEmail(email: string): Promise<any>  {\n        try {\n            const data = await AuthModel.findOne({ where: { email } });\n            return data;\n          } catch (e) {\n            throw new Error(`Cannot find data because : ${e}`)\n          }\n      }\n\n      async getProfileById(authId: string): Promise<any>{\n        try {\n            const data = await AuthModel.findByPk(authId, {\n                include: ['location', 'tags'],\n                attributes: { exclude: ['password', 'locationId', 'createdAt', 'updatedAt'] },\n            });\n            return data;\n        } catch (error) {\n            throw new Error(`Cannot find data because : ${error}`)\n        }\n    }\n\n    async changeDeviceToken(editDeviceTokenRequest: EditDeviceTokenRequest, authId: string): Promise<any>{\n        try {\n            const [updatedRowsCount] = await AuthModel.update(editDeviceTokenRequest, {\n                where: {authId}\n            });\n            return updatedRowsCount > 0;\n        } catch (error) {\n            throw new Error(`Cannot change data because : ${error}`)\n\n        }\n    }\n\n    async changeProfile(editProfileRequest: EditProfileRequest ,authId: string): Promise<any>{ \n        try {\n            const [updatedRowsCount] = await AuthModel.update(editProfileRequest, {\n                where: {authId}\n            });\n            return updatedRowsCount > 0;\n        } catch (error) {\n            throw new Error(`Cannot change data because : ${error}`)\n\n        }\n    }\n\n    // async getNotificationById(id: string): Promise<any>{\n    //     try {\n    //         const data = await AuthModel.findByPk(id, {include: [\"notifications\"]})\n    //         return data\n    //     } catch (error) {\n    //         throw new Error(`Cannot find data because : ${error}`)\n    //     }\n    // }\n\n    async createUser(registerRequest : RegisterRequest): Promise<any>{\n        try {\n            const newUser = await AuthModel.create({\n                authId: uuidv4(),\n                email: registerRequest.email,\n                password: registerRequest.password\n            }, \n        );\n            return newUser;\n        } catch (error) {\n            throw new Error(`Cannot create data because : ${error}`)\n        }\n    }\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,kBAA0B;AAC1B,kBAA6B;AAItB,MAAM,eAAc;AAAA,EAEvB,MAAM,UAAU,OAA8B;AAC1C,QAAI;AACA,YAAM,OAAO,MAAM,sBAAU,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AACzD,aAAO;AAAA,IACT,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,8BAA8B,CAAC,EAAE;AAAA,IACnD;AAAA,EACJ;AAAA,EAEA,MAAM,eAAe,QAA6B;AAChD,QAAI;AACA,YAAM,OAAO,MAAM,sBAAU,SAAS,QAAQ;AAAA,QAC1C,SAAS,CAAC,YAAY,MAAM;AAAA,QAC5B,YAAY,EAAE,SAAS,CAAC,YAAY,cAAc,aAAa,WAAW,EAAE;AAAA,MAChF,CAAC;AACD,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,YAAM,IAAI,MAAM,8BAA8B,KAAK,EAAE;AAAA,IACzD;AAAA,EACJ;AAAA,EAEA,MAAM,kBAAkB,wBAAgD,QAA6B;AACjG,QAAI;AACA,YAAM,CAAC,gBAAgB,IAAI,MAAM,sBAAU,OAAO,wBAAwB;AAAA,QACtE,OAAO,EAAC,OAAM;AAAA,MAClB,CAAC;AACD,aAAO,mBAAmB;AAAA,IAC9B,SAAS,OAAO;AACZ,YAAM,IAAI,MAAM,gCAAgC,KAAK,EAAE;AAAA,IAE3D;AAAA,EACJ;AAAA,EAEA,MAAM,cAAc,oBAAwC,QAA6B;AACrF,QAAI;AACA,YAAM,CAAC,gBAAgB,IAAI,MAAM,sBAAU,OAAO,oBAAoB;AAAA,QAClE,OAAO,EAAC,OAAM;AAAA,MAClB,CAAC;AACD,aAAO,mBAAmB;AAAA,IAC9B,SAAS,OAAO;AACZ,YAAM,IAAI,MAAM,gCAAgC,KAAK,EAAE;AAAA,IAE3D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,WAAW,iBAAgD;AAC7D,QAAI;AACA,YAAM,UAAU,MAAM,sBAAU;AAAA,QAAO;AAAA,UACnC,YAAQ,YAAAA,IAAO;AAAA,UACf,OAAO,gBAAgB;AAAA,UACvB,UAAU,gBAAgB;AAAA,QAC9B;AAAA,MACJ;AACI,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,YAAM,IAAI,MAAM,gCAAgC,KAAK,EAAE;AAAA,IAC3D;AAAA,EACJ;AAEJ;",
  "names": ["uuidv4"]
}
