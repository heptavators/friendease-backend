{
  "version": 3,
  "sources": ["../../../src/repositories/Base/index.ts"],
  "sourcesContent": ["import { Model, FindOptions  } from 'sequelize';\nimport { IRead } from '../Interfaces/IRead';\nimport { IWrite } from '../Interfaces/IWrite';\n\nexport abstract class BaseRepository<T> implements IWrite<T>, IRead<T>  {\n  model: any;\n\n  constructor(model: Model) {\n    this.model = model;\n  }\n  async create(data: any): Promise<any> {\n    try {\n      return await this.model.create(data);\n    } catch (e) {\n      throw new Error(`Cannot create data because: ${e}`);\n    }\n  }\n\n  async update(id: string, data: any): Promise<boolean> {\n    try {\n      const [updatedRowsCount] = await this.model.update(data, {\n        where: { id },\n      });\n      return updatedRowsCount > 0;\n    } catch (e) {\n      throw new Error(`Cannot update data because: ${e}`);\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    try {\n      const deletedRowsCount = await this.model.destroy({\n        where: { id },\n      });\n      return deletedRowsCount > 0;\n    } catch (e) {\n      throw new Error(`Cannot delete data because: ${e}`);\n    }\n  }\n  \n  async find(options: FindOptions): Promise<any> {\n    try {\n      const instances = await this.model.findAll(options);\n      return instances.map((instance: any) => instance.toJSON());\n    } catch (e) {\n      throw new Error(`Not found data: ${e}`);\n    }\n  }\n  \n  async count(options: FindOptions): Promise<number> {\n    try {\n      return await this.model.count(options);\n    } catch (e) {\n      throw new Error(`Not found data: ${e}`);\n    }\n  }\n  \n  async findOne(id: string): Promise<any> {\n    try {\n      const instance = await this.model.findOne(id);\n      return instance ? (instance.toJSON()) : null;\n    } catch (e) {\n      throw new Error(`Cannot find data because: ${e}`);\n    }\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIO,MAAe,eAAkD;AAAA,EACtE;AAAA,EAEA,YAAY,OAAc;AACxB,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,MAAM,OAAO,MAAyB;AACpC,QAAI;AACF,aAAO,MAAM,KAAK,MAAM,OAAO,IAAI;AAAA,IACrC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,+BAA+B,CAAC,EAAE;AAAA,IACpD;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,IAAY,MAA6B;AACpD,QAAI;AACF,YAAM,CAAC,gBAAgB,IAAI,MAAM,KAAK,MAAM,OAAO,MAAM;AAAA,QACvD,OAAO,EAAE,GAAG;AAAA,MACd,CAAC;AACD,aAAO,mBAAmB;AAAA,IAC5B,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,+BAA+B,CAAC,EAAE;AAAA,IACpD;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,IAA8B;AACzC,QAAI;AACF,YAAM,mBAAmB,MAAM,KAAK,MAAM,QAAQ;AAAA,QAChD,OAAO,EAAE,GAAG;AAAA,MACd,CAAC;AACD,aAAO,mBAAmB;AAAA,IAC5B,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,+BAA+B,CAAC,EAAE;AAAA,IACpD;AAAA,EACF;AAAA,EAEA,MAAM,KAAK,SAAoC;AAC7C,QAAI;AACF,YAAM,YAAY,MAAM,KAAK,MAAM,QAAQ,OAAO;AAClD,aAAO,UAAU,IAAI,CAAC,aAAkB,SAAS,OAAO,CAAC;AAAA,IAC3D,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,mBAAmB,CAAC,EAAE;AAAA,IACxC;AAAA,EACF;AAAA,EAEA,MAAM,MAAM,SAAuC;AACjD,QAAI;AACF,aAAO,MAAM,KAAK,MAAM,MAAM,OAAO;AAAA,IACvC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,mBAAmB,CAAC,EAAE;AAAA,IACxC;AAAA,EACF;AAAA,EAEA,MAAM,QAAQ,IAA0B;AACtC,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,MAAM,QAAQ,EAAE;AAC5C,aAAO,WAAY,SAAS,OAAO,IAAK;AAAA,IAC1C,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,6BAA6B,CAAC,EAAE;AAAA,IAClD;AAAA,EACF;AACF;",
  "names": []
}
