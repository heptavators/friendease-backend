{
  "version": 3,
  "sources": ["../../../src/repositories/Base/index.ts"],
  "sourcesContent": ["import { IRead } from '../Interfaces/IRead';\nimport { IWrite } from '../Interfaces/IWrite';\nimport { Model, FindOptions } from 'sequelize';\nimport Database from '../../configs/Database'; // Import the Sequelize instance\n\nexport abstract class BaseRepository<T> {\n  model: Model;\n\n  constructor(model: Model) {\n    this.model = model;\n  }\n\n  async create(data: any): Promise<any> {\n    try {\n      const instance = await (this.model as any).create(data);\n      return instance.toJSON();\n    } catch (e) {\n      throw new Error(`Cannot create data because: ${e}`);\n    }\n  }\n\n  async update(id: string, data: any): Promise<boolean> {\n    try {\n      const [updatedRowsCount] = await (this.model as any).update(data, {\n        where: { id },\n      });\n      return updatedRowsCount > 0;\n    } catch (e) {\n      throw new Error(`Cannot update data because: ${e}`);\n    }\n  }\n\n  async delete(id: string): Promise<boolean> {\n    try {\n      const deletedRowsCount = await (this.model as any).destroy({\n        where: { id },\n      });\n      return deletedRowsCount > 0;\n    } catch (e) {\n      throw new Error(`Cannot delete data because: ${e}`);\n    }\n  }\n  \n  async find(options: FindOptions): Promise<any> {\n    try {\n      const instances = await (this.model as any).findAll();\n      return instances.map((instance: any) => instance.toJSON());\n    } catch (e) {\n      throw new Error(`Not found data: ${e}`);\n    }\n  }\n  \n  async count(options: FindOptions): Promise<number> {\n    try {\n      return await (this.model as any).count(options);\n    } catch (e) {\n      throw new Error(`Not found data: ${e}`);\n    }\n  }\n  \n  async findOne(id: string): Promise<any> {\n    try {\n      const instance = await (this.model as any).findByPk(id);\n      return instance ? (instance.toJSON()) : null;\n    } catch (e) {\n      throw new Error(`Cannot find data because: ${e}`);\n    }\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,MAAe,eAAkB;AAAA,EACtC;AAAA,EAEA,YAAY,OAAc;AACxB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,MAAM,OAAO,MAAyB;AACpC,QAAI;AACF,YAAM,WAAW,MAAO,KAAK,MAAc,OAAO,IAAI;AACtD,aAAO,SAAS,OAAO;AAAA,IACzB,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,+BAA+B,CAAC,EAAE;AAAA,IACpD;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,IAAY,MAA6B;AACpD,QAAI;AACF,YAAM,CAAC,gBAAgB,IAAI,MAAO,KAAK,MAAc,OAAO,MAAM;AAAA,QAChE,OAAO,EAAE,GAAG;AAAA,MACd,CAAC;AACD,aAAO,mBAAmB;AAAA,IAC5B,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,+BAA+B,CAAC,EAAE;AAAA,IACpD;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,IAA8B;AACzC,QAAI;AACF,YAAM,mBAAmB,MAAO,KAAK,MAAc,QAAQ;AAAA,QACzD,OAAO,EAAE,GAAG;AAAA,MACd,CAAC;AACD,aAAO,mBAAmB;AAAA,IAC5B,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,+BAA+B,CAAC,EAAE;AAAA,IACpD;AAAA,EACF;AAAA,EAEA,MAAM,KAAK,SAAoC;AAC7C,QAAI;AACF,YAAM,YAAY,MAAO,KAAK,MAAc,QAAQ;AACpD,aAAO,UAAU,IAAI,CAAC,aAAkB,SAAS,OAAO,CAAC;AAAA,IAC3D,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,mBAAmB,CAAC,EAAE;AAAA,IACxC;AAAA,EACF;AAAA,EAEA,MAAM,MAAM,SAAuC;AACjD,QAAI;AACF,aAAO,MAAO,KAAK,MAAc,MAAM,OAAO;AAAA,IAChD,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,mBAAmB,CAAC,EAAE;AAAA,IACxC;AAAA,EACF;AAAA,EAEA,MAAM,QAAQ,IAA0B;AACtC,QAAI;AACF,YAAM,WAAW,MAAO,KAAK,MAAc,SAAS,EAAE;AACtD,aAAO,WAAY,SAAS,OAAO,IAAK;AAAA,IAC1C,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,6BAA6B,CAAC,EAAE;AAAA,IAClD;AAAA,EACF;AACF;",
  "names": []
}
