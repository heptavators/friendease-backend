{
  "version": 3,
  "sources": ["../../../src/repositories/Base/index.ts"],
  "sourcesContent": ["import { IRead } from \"../Interfaces/IRead\";\r\nimport { IWrite } from \"../Interfaces/IWrite\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient()\r\nexport abstract class BaseRepository<T> implements IWrite<T>, IRead<T> {\r\n\r\n  model: any\r\n\r\n  constructor(model: any){\r\n    this.model = prisma[model]\r\n  }\r\n\r\n  async create(data: T): Promise<any> {\r\n    try {\r\n      return this.model.create({ data })\r\n    } catch (e) {\r\n      throw new Error(`Cannot create data because : ${e}`)\r\n    }\r\n  }\r\n\r\n  update(id: string, data: T): Promise<boolean> {\r\n    try {\r\n      return this.model.update({ where: {id}, data})\r\n    } catch (e) {\r\n      throw new Error(`Cannot update data because : ${e}`)\r\n    }\r\n  }\r\n  \r\n  delete(id: string): Promise<boolean> {\r\n    try {\r\n      return this.model.delete({where: {id}})\r\n    } catch (e) {\r\n      throw new Error(`Cannot delete data because : ${e}`)\r\n    }\r\n  }\r\n\r\n  find(options: object): Promise<T[]> {\r\n    try {\r\n      return this.model.findMany(options)\r\n    } catch (e) {\r\n      throw new Error(`Not found data : ${e}`)\r\n    }\r\n  }\r\n\r\n  count(options: object): Promise<number> {\r\n    try {\r\n      return this.model.count(options)\r\n    } catch (e) {\r\n      throw new Error(`Not found data : ${e}`)\r\n    }\r\n  }\r\n\r\n  findOne(id: string): Promise<any> {\r\n    try {\r\n      return this.model.findUnique({ where: { id } });\r\n    } catch (e) {\r\n      throw new Error(`Cannot find data because : ${e}`)\r\n    }\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,oBAA6B;AAE7B,MAAM,SAAS,IAAI,2BAAa;AACzB,MAAe,eAAiD;AAAA,EAErE;AAAA,EAEA,YAAY,OAAW;AACrB,SAAK,QAAQ,OAAO,KAAK;AAAA,EAC3B;AAAA,EAEA,MAAM,OAAO,MAAuB;AAClC,QAAI;AACF,aAAO,KAAK,MAAM,OAAO,EAAE,KAAK,CAAC;AAAA,IACnC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,gCAAgC,CAAC,EAAE;AAAA,IACrD;AAAA,EACF;AAAA,EAEA,OAAO,IAAY,MAA2B;AAC5C,QAAI;AACF,aAAO,KAAK,MAAM,OAAO,EAAE,OAAO,EAAC,GAAE,GAAG,KAAI,CAAC;AAAA,IAC/C,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,gCAAgC,CAAC,EAAE;AAAA,IACrD;AAAA,EACF;AAAA,EAEA,OAAO,IAA8B;AACnC,QAAI;AACF,aAAO,KAAK,MAAM,OAAO,EAAC,OAAO,EAAC,GAAE,EAAC,CAAC;AAAA,IACxC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,gCAAgC,CAAC,EAAE;AAAA,IACrD;AAAA,EACF;AAAA,EAEA,KAAK,SAA+B;AAClC,QAAI;AACF,aAAO,KAAK,MAAM,SAAS,OAAO;AAAA,IACpC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,oBAAoB,CAAC,EAAE;AAAA,IACzC;AAAA,EACF;AAAA,EAEA,MAAM,SAAkC;AACtC,QAAI;AACF,aAAO,KAAK,MAAM,MAAM,OAAO;AAAA,IACjC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,oBAAoB,CAAC,EAAE;AAAA,IACzC;AAAA,EACF;AAAA,EAEA,QAAQ,IAA0B;AAChC,QAAI;AACF,aAAO,KAAK,MAAM,WAAW,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAAA,IAChD,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,8BAA8B,CAAC,EAAE;AAAA,IACnD;AAAA,EACF;AACF;",
  "names": []
}
