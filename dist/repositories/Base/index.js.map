{
  "version": 3,
  "sources": ["../../../src/repositories/Base/index.ts"],
  "sourcesContent": ["import { IRead } from \"../Interfaces/IRead\";\nimport { IWrite } from \"../Interfaces/IWrite\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient()\nexport abstract class BaseRepository<T> implements IWrite<T>, IRead<T> {\n\n  model: any\n\n  constructor(model: any){\n    this.model = prisma[model]\n  }\n\n  async create(data: T): Promise<any> {\n    try {\n      return this.model.create({ data })\n    } catch (e) {\n      throw new Error(`Cannot create data because : ${e}`)\n    }\n  }\n\n  update(special_id: string, data: T): Promise<boolean> {\n    try {\n      return this.model.update({ where: {special_id}, data})\n    } catch (e) {\n      throw new Error(`Cannot update data because : ${e}`)\n    }\n  }\n  \n  delete(special_id: string): Promise<boolean> {\n    try {\n      return this.model.delete({where: {special_id}})\n    } catch (e) {\n      throw new Error(`Cannot delete data because : ${e}`)\n    }\n  }\n\n  find(options: object): Promise<T[]> {\n    try {\n      return this.model.findMany(options)\n    } catch (e) {\n      throw new Error(`Not found data : ${e}`)\n    }\n  }\n\n  count(options: object): Promise<T[]> {\n    try {\n      return this.model.count(options)\n    } catch (e) {\n      throw new Error(`Not found data : ${e}`)\n    }\n  }\n\n  findOne(id: string): Promise<any> {\n    try {\n      return this.model.findUnique({ where: { id } });\n    } catch (e) {\n      throw new Error(`Cannot find data because : ${e}`)\n    }\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,oBAA6B;AAE7B,MAAM,SAAS,IAAI,2BAAa;AACzB,MAAe,eAAiD;AAAA,EAErE;AAAA,EAEA,YAAY,OAAW;AACrB,SAAK,QAAQ,OAAO,KAAK;AAAA,EAC3B;AAAA,EAEA,MAAM,OAAO,MAAuB;AAClC,QAAI;AACF,aAAO,KAAK,MAAM,OAAO,EAAE,KAAK,CAAC;AAAA,IACnC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,gCAAgC,CAAC,EAAE;AAAA,IACrD;AAAA,EACF;AAAA,EAEA,OAAO,YAAoB,MAA2B;AACpD,QAAI;AACF,aAAO,KAAK,MAAM,OAAO,EAAE,OAAO,EAAC,WAAU,GAAG,KAAI,CAAC;AAAA,IACvD,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,gCAAgC,CAAC,EAAE;AAAA,IACrD;AAAA,EACF;AAAA,EAEA,OAAO,YAAsC;AAC3C,QAAI;AACF,aAAO,KAAK,MAAM,OAAO,EAAC,OAAO,EAAC,WAAU,EAAC,CAAC;AAAA,IAChD,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,gCAAgC,CAAC,EAAE;AAAA,IACrD;AAAA,EACF;AAAA,EAEA,KAAK,SAA+B;AAClC,QAAI;AACF,aAAO,KAAK,MAAM,SAAS,OAAO;AAAA,IACpC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,oBAAoB,CAAC,EAAE;AAAA,IACzC;AAAA,EACF;AAAA,EAEA,MAAM,SAA+B;AACnC,QAAI;AACF,aAAO,KAAK,MAAM,MAAM,OAAO;AAAA,IACjC,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,oBAAoB,CAAC,EAAE;AAAA,IACzC;AAAA,EACF;AAAA,EAEA,QAAQ,IAA0B;AAChC,QAAI;AACF,aAAO,KAAK,MAAM,WAAW,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAAA,IAChD,SAAS,GAAG;AACV,YAAM,IAAI,MAAM,8BAA8B,CAAC,EAAE;AAAA,IACnD;AAAA,EACF;AACF;",
  "names": []
}
