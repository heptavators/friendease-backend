{
  "version": 3,
  "sources": ["../../../src/services/Auth/index.ts"],
  "sourcesContent": ["import { AuthRepository } from \"../../repositories/Auth\";\r\nimport { Login  as LoginRequest } from '../../domains/web/Login';\r\nimport { GenerateJwtToken } from \"../../helpers/JWT\";\r\nimport bcryptjs from \"bcryptjs\"\r\nimport { ValidationException } from \"../../helpers/Validator\";\r\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\r\n\r\nexport class AuthService {\r\n    private authRepository: AuthRepository\r\n\r\n    constructor(authRepository: AuthRepository){\r\n        this.authRepository = new AuthRepository()\r\n    }\r\n\r\n    async SignInService(LoginRequest: LoginRequest) {\r\n            const user = await this.authRepository.findEmail(LoginRequest.email)\r\n            if (!user) {\r\n                throw new ValidationException([{ error: 'email', message: 'Incorrect Email', code: 404 }]);\r\n            }\r\n\r\n            const comparePassword = bcryptjs.compareSync(LoginRequest.password, user.password)\r\n            if (!comparePassword) {\r\n                throw new BadRequestError([{ error: 'password', message: 'Incorrect password', code: 401 }]);\r\n            }\r\n\r\n            const token = GenerateJwtToken(user);\r\n            return token;\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA+B;AAE/B,iBAAiC;AACjC,sBAAqB;AACrB,uBAAoC;AACpC,6BAAgC;AAEzB,MAAM,YAAY;AAAA,EACb;AAAA,EAER,YAAY,gBAA+B;AACvC,SAAK,iBAAiB,IAAI,2BAAe;AAAA,EAC7C;AAAA,EAEA,MAAM,cAAcA,eAA4B;AACxC,UAAM,OAAO,MAAM,KAAK,eAAe,UAAUA,cAAa,KAAK;AACnE,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,qCAAoB,CAAC,EAAE,OAAO,SAAS,SAAS,mBAAmB,MAAM,IAAI,CAAC,CAAC;AAAA,IAC7F;AAEA,UAAM,kBAAkB,gBAAAC,QAAS,YAAYD,cAAa,UAAU,KAAK,QAAQ;AACjF,QAAI,CAAC,iBAAiB;AAClB,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,YAAY,SAAS,sBAAsB,MAAM,IAAI,CAAC,CAAC;AAAA,IAC/F;AAEA,UAAM,YAAQ,6BAAiB,IAAI;AACnC,WAAO;AAAA,EAEb;AAKN;",
  "names": ["LoginRequest", "bcryptjs"]
}
