{
  "version": 3,
  "sources": ["../../../src/services/Auth/index.ts"],
  "sourcesContent": ["import { AuthRepository } from \"../../repositories/Auth\";\r\nimport { LoginRequest } from '../../domains/web/Auth/LoginRequest';\r\nimport { RegisterRequest } from '../../domains/web/Auth/RegisterRequest';\r\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\r\nimport { GenerateJwtToken } from \"../../helpers/JWT\";\r\nimport bcryptjs from \"bcryptjs\";\r\nimport { EditDeviceTokenRequest } from \"../../domains/web/Auth/EditDeviceTokenRequest\";\r\nimport { EditProfileRequest } from \"../../domains/web/Auth/EditProfileRequest\";\r\nimport { TagTalentRepository } from \"../../repositories/TagTalent\";\r\n\r\nexport class AuthService {\r\n    private authRepository: AuthRepository\r\n    private tagTalentRepository: TagTalentRepository;\r\n    private static instance: AuthService\r\n\r\n    private constructor(authRepository: AuthRepository, tagTalentRepository: TagTalentRepository) {\r\n        this.authRepository = authRepository;\r\n        this.tagTalentRepository = tagTalentRepository;\r\n    }\r\n\r\n    static getInstance(authRepository: AuthRepository, tagTalentRepository: TagTalentRepository): AuthService {\r\n        if (!this.instance) {\r\n            this.instance = new AuthService(authRepository, tagTalentRepository);\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n\r\n    async SignInService(loginRequest: LoginRequest) {\r\n            const findUser = await this.authRepository.findEmail(loginRequest.email);\r\n            if (!findUser) {\r\n                    throw new BadRequestError([{ error: 'email', message: 'Email Tidak Ditemukan' }], 401);\r\n            }\r\n\r\n            const user = findUser.toJSON();\r\n\r\n            const comparePassword = bcryptjs.compareSync(loginRequest.password, user.password)\r\n            if (!comparePassword) {\r\n                throw new BadRequestError([{ error: 'password', message: 'Password Salah' }], 401);\r\n            }\r\n\r\n            const token = GenerateJwtToken(user);\r\n            return token;\r\n    }\r\n\r\n    async ChangeDeviceTokenService(editDeviceTokenRequest: EditDeviceTokenRequest, authId: string) {\r\n        const user = await this.authRepository.changeDeviceToken(editDeviceTokenRequest, authId);\r\n        return user;\r\n    }\r\n    \r\n    async ChangeProfileService(editProfileRequest: EditProfileRequest, authId: string){\r\n        console.log(editProfileRequest.tags)\r\n        // const user = await this.authRepository.changeProfile(editProfileRequest, authId);\r\n        const tags = await this.tagTalentRepository.testInsertOrder(editProfileRequest.tags)\r\n        const profile = await this.authRepository.getProfileById(authId);\r\n        return profile;\r\n    }\r\n\r\n    async RegisterService(registerRequest: RegisterRequest) {\r\n        const existingUser = await this.authRepository.findEmail(registerRequest.email);\r\n\r\n        if (existingUser) {\r\n          throw new BadRequestError([{ error: 'email', message: 'Email already exists' }], 401);\r\n        }\r\n  \r\n        const hashedPassword = await bcryptjs.hash(registerRequest.password, 10);\r\n        \r\n        const data = {\r\n            email: registerRequest.email,\r\n            password: hashedPassword,\r\n        }\r\n\r\n        const newUser = await this.authRepository.createUser(data);\r\n  \r\n        return newUser;\r\n    }\r\n\r\n    async GetProfileService(authId: string){\r\n        const findUser = await this.authRepository.getProfileById(authId);\r\n        if (!findUser) {\r\n                throw new BadRequestError([{ error: 'email', message: 'Email Tidak Ditemukan' }], 401);\r\n        }\r\n\r\n        return findUser; \r\n    }\r\n}\r\n\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,6BAAgC;AAChC,iBAAiC;AACjC,sBAAqB;AAKd,MAAM,YAAY;AAAA,EACb;AAAA,EACA;AAAA,EACR,OAAe;AAAA,EAEP,YAAY,gBAAgC,qBAA0C;AAC1F,SAAK,iBAAiB;AACtB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEA,OAAO,YAAY,gBAAgC,qBAAuD;AACtG,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,WAAW,IAAI,YAAY,gBAAgB,mBAAmB;AAAA,IACvE;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAGA,MAAM,cAAc,cAA4B;AACxC,UAAM,WAAW,MAAM,KAAK,eAAe,UAAU,aAAa,KAAK;AACvE,QAAI,CAAC,UAAU;AACP,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,SAAS,SAAS,wBAAwB,CAAC,GAAG,GAAG;AAAA,IAC7F;AAEA,UAAM,OAAO,SAAS,OAAO;AAE7B,UAAM,kBAAkB,gBAAAA,QAAS,YAAY,aAAa,UAAU,KAAK,QAAQ;AACjF,QAAI,CAAC,iBAAiB;AAClB,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,YAAY,SAAS,iBAAiB,CAAC,GAAG,GAAG;AAAA,IACrF;AAEA,UAAM,YAAQ,6BAAiB,IAAI;AACnC,WAAO;AAAA,EACf;AAAA,EAEA,MAAM,yBAAyB,wBAAgD,QAAgB;AAC3F,UAAM,OAAO,MAAM,KAAK,eAAe,kBAAkB,wBAAwB,MAAM;AACvF,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,qBAAqB,oBAAwC,QAAe;AAC9E,YAAQ,IAAI,mBAAmB,IAAI;AAEnC,UAAM,OAAO,MAAM,KAAK,oBAAoB,gBAAgB,mBAAmB,IAAI;AACnF,UAAM,UAAU,MAAM,KAAK,eAAe,eAAe,MAAM;AAC/D,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,gBAAgB,iBAAkC;AACpD,UAAM,eAAe,MAAM,KAAK,eAAe,UAAU,gBAAgB,KAAK;AAE9E,QAAI,cAAc;AAChB,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,SAAS,SAAS,uBAAuB,CAAC,GAAG,GAAG;AAAA,IACtF;AAEA,UAAM,iBAAiB,MAAM,gBAAAA,QAAS,KAAK,gBAAgB,UAAU,EAAE;AAEvE,UAAM,OAAO;AAAA,MACT,OAAO,gBAAgB;AAAA,MACvB,UAAU;AAAA,IACd;AAEA,UAAM,UAAU,MAAM,KAAK,eAAe,WAAW,IAAI;AAEzD,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,kBAAkB,QAAe;AACnC,UAAM,WAAW,MAAM,KAAK,eAAe,eAAe,MAAM;AAChE,QAAI,CAAC,UAAU;AACP,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,SAAS,SAAS,wBAAwB,CAAC,GAAG,GAAG;AAAA,IAC7F;AAEA,WAAO;AAAA,EACX;AACJ;",
  "names": ["bcryptjs"]
}
