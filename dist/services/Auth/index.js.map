{
  "version": 3,
  "sources": ["../../../src/services/Auth/index.ts"],
  "sourcesContent": ["import { AuthRepository } from \"../../repositories/Auth\";\r\nimport { Login  as LoginRequest } from '../../domains/web/Login';\r\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\r\nimport { GenerateJwtToken } from \"../../helpers/JWT\";\r\nimport bcryptjs from \"bcryptjs\";\r\n\r\nexport class AuthService {\r\n    private authRepository: AuthRepository\r\n    private static instance: AuthService\r\n\r\n    private constructor(authRepository: AuthRepository) {\r\n        this.authRepository = authRepository;\r\n    }\r\n\r\n    static getInstance(authRepository: AuthRepository): AuthService {\r\n        if (!this.instance) {\r\n            this.instance = new AuthService(authRepository);\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n\r\n    async SignInService(LoginRequest: LoginRequest) {\r\n            const findUser = await this.authRepository.findEmail(LoginRequest.email);\r\n            if (!findUser) {\r\n                    throw new BadRequestError([{ error: 'email', message: 'Email Tidak Ditemukan' }], 401);\r\n            }\r\n\r\n            const user = findUser.toJSON();\r\n\r\n            const comparePassword = bcryptjs.compareSync(LoginRequest.password, user.password)\r\n            if (!comparePassword) {\r\n                throw new BadRequestError([{ error: 'password', message: 'Password Salah' }], 401);\r\n            }\r\n\r\n            const token = GenerateJwtToken(user);\r\n            return token;\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,6BAAgC;AAChC,iBAAiC;AACjC,sBAAqB;AAEd,MAAM,YAAY;AAAA,EACb;AAAA,EACR,OAAe;AAAA,EAEP,YAAY,gBAAgC;AAChD,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAEA,OAAO,YAAY,gBAA6C;AAC5D,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,WAAW,IAAI,YAAY,cAAc;AAAA,IAClD;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAGA,MAAM,cAAcA,eAA4B;AACxC,UAAM,WAAW,MAAM,KAAK,eAAe,UAAUA,cAAa,KAAK;AACvE,QAAI,CAAC,UAAU;AACP,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,SAAS,SAAS,wBAAwB,CAAC,GAAG,GAAG;AAAA,IAC7F;AAEA,UAAM,OAAO,SAAS,OAAO;AAE7B,UAAM,kBAAkB,gBAAAC,QAAS,YAAYD,cAAa,UAAU,KAAK,QAAQ;AACjF,QAAI,CAAC,iBAAiB;AAClB,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,YAAY,SAAS,iBAAiB,CAAC,GAAG,GAAG;AAAA,IACrF;AAEA,UAAM,YAAQ,6BAAiB,IAAI;AACnC,WAAO;AAAA,EACf;AAKJ;",
  "names": ["LoginRequest", "bcryptjs"]
}
