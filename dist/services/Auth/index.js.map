{
  "version": 3,
  "sources": ["../../../src/services/Auth/index.ts"],
  "sourcesContent": ["import { AuthRepository } from \"../../repositories/Auth\";\nimport { Login  as LoginRequest } from '../../domains/web/Login';\nimport { GenerateJwtToken } from \"../../helpers/JWT\";\nimport bcryptjs from \"bcryptjs\"\nimport { ValidationException } from \"../../helpers/Validator\";\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\n\nexport class AuthService {\n    private authRepository: AuthRepository\n\n    constructor(authRepository: AuthRepository){\n        this.authRepository = new AuthRepository()\n    }\n\n    async SignInService(LoginRequest: LoginRequest) {\n            const user = await this.authRepository.findEmail(LoginRequest.email)\n            if (!user) {\n                throw new BadRequestError([{ error: 'email', message: 'Email Tidak Ditemukan' }], 401);\n            }\n\n            const comparePassword = bcryptjs.compareSync(LoginRequest.password, user.password)\n            if (!comparePassword) {\n                throw new BadRequestError([{ error: 'password', message: 'Password Salah' }], 401);\n            }\n\n            const token = GenerateJwtToken(user);\n            return token;\n\n      }\n\n\n\n\n}\n\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA+B;AAE/B,iBAAiC;AACjC,sBAAqB;AAErB,6BAAgC;AAEzB,MAAM,YAAY;AAAA,EACb;AAAA,EAER,YAAY,gBAA+B;AACvC,SAAK,iBAAiB,IAAI,2BAAe;AAAA,EAC7C;AAAA,EAEA,MAAM,cAAcA,eAA4B;AACxC,UAAM,OAAO,MAAM,KAAK,eAAe,UAAUA,cAAa,KAAK;AACnE,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,SAAS,SAAS,wBAAwB,CAAC,GAAG,GAAG;AAAA,IACzF;AAEA,UAAM,kBAAkB,gBAAAC,QAAS,YAAYD,cAAa,UAAU,KAAK,QAAQ;AACjF,QAAI,CAAC,iBAAiB;AAClB,YAAM,IAAI,uCAAgB,CAAC,EAAE,OAAO,YAAY,SAAS,iBAAiB,CAAC,GAAG,GAAG;AAAA,IACrF;AAEA,UAAM,YAAQ,6BAAiB,IAAI;AACnC,WAAO;AAAA,EAEb;AAKN;",
  "names": ["LoginRequest", "bcryptjs"]
}
