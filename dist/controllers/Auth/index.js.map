{
  "version": 3,
  "sources": ["../../../src/controllers/Auth/index.ts"],
  "sourcesContent": ["import { AuthService } from \"../../services/Auth\";\nimport { Request, Response } from \"express-serve-static-core\";\nimport { logger } from \"../../helpers/Log\";\nimport ErrorFormatter from \"../../helpers/Response/ErrorFormatter\";\nimport SuccessSingularFormatter from '../../helpers/Response/SuccessSingularFormatter';\nimport { LoginRequest } from '../../domains/web/Login/LoginRequest';\nimport { ValidationException, Validator } from '../../helpers/Validator';\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\nimport { RegisterRequest } from \"../../domains/web/Login/RegisterRequest\";\n\nexport class Auth {\n    authService: AuthService\n\n    constructor(authService: AuthService){\n        this.authService = authService\n    }\n\n    async LoginController(req: Request, res: Response) {\n      try {\n        const data = req.body as LoginRequest;\n        const validatedData = Validator.validate(data, LoginRequest.getSchema());\n        const result = await this.authService.SignInService(validatedData);\n\n        const response = SuccessSingularFormatter('Berhasil Login', { token: result });\n\n        return res.status(200).send(response);\n\n      } catch (error: any) {\n        handleErrorResponse(res, error)\n      } \n    }\n\n    async ProfileController(req: Request, res: Response) {\n      try {\n        const result = await this.authService.GetProfileService(\"\");\n\n        const response = SuccessSingularFormatter('Berhasil Login', { token: result });\n\n        return res.status(200).send(response);\n\n      } catch (error: any) {\n        handleErrorResponse(res, error)\n      } \n    }\n\n    async RegisterController(req: Request, res: Response){\n      try {\n        const data = req.body as RegisterRequest;\n        const validatedData = Validator.validate(data, RegisterRequest.getSchema());\n        const result = await this.authService.RegisterService(validatedData);\n\n        const response = SuccessSingularFormatter('Berhasil Register Akun', { data: result });\n\n        return res.status(200).send(response);\n\n      } catch (error) {\n        handleErrorResponse(res, error)\n      }\n    }\n  \n\n  }\n\n\n  \nconst handleErrorResponse = (res: Response, error: any) => {\n  if (error instanceof BadRequestError || error instanceof ValidationException) {\n    const response = ErrorFormatter(error.toResponseObject());\n    return res.status(error.status).send(response);\n  }\n\n  logger.error(error);\n  const response = ErrorFormatter(error);\n  return res.status(500).send(response);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAuB;AACvB,4BAA2B;AAC3B,sCAAqC;AACrC,0BAA6B;AAC7B,uBAA+C;AAC/C,6BAAgC;AAChC,6BAAgC;AAEzB,MAAM,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,aAAyB;AACjC,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,MAAM,gBAAgB,KAAc,KAAe;AACjD,QAAI;AACF,YAAM,OAAO,IAAI;AACjB,YAAM,gBAAgB,2BAAU,SAAS,MAAM,iCAAa,UAAU,CAAC;AACvE,YAAM,SAAS,MAAM,KAAK,YAAY,cAAc,aAAa;AAEjE,YAAM,eAAW,gCAAAA,SAAyB,kBAAkB,EAAE,OAAO,OAAO,CAAC;AAE7E,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAY;AACnB,0BAAoB,KAAK,KAAK;AAAA,IAChC;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,KAAc,KAAe;AACnD,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,YAAY,kBAAkB,EAAE;AAE1D,YAAM,eAAW,gCAAAA,SAAyB,kBAAkB,EAAE,OAAO,OAAO,CAAC;AAE7E,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAY;AACnB,0BAAoB,KAAK,KAAK;AAAA,IAChC;AAAA,EACF;AAAA,EAEA,MAAM,mBAAmB,KAAc,KAAc;AACnD,QAAI;AACF,YAAM,OAAO,IAAI;AACjB,YAAM,gBAAgB,2BAAU,SAAS,MAAM,uCAAgB,UAAU,CAAC;AAC1E,YAAM,SAAS,MAAM,KAAK,YAAY,gBAAgB,aAAa;AAEnE,YAAM,eAAW,gCAAAA,SAAyB,0BAA0B,EAAE,MAAM,OAAO,CAAC;AAEpF,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAO;AACd,0BAAoB,KAAK,KAAK;AAAA,IAChC;AAAA,EACF;AAGF;AAIF,MAAM,sBAAsB,CAAC,KAAe,UAAe;AACzD,MAAI,iBAAiB,0CAAmB,iBAAiB,sCAAqB;AAC5E,UAAMC,gBAAW,sBAAAC,SAAe,MAAM,iBAAiB,CAAC;AACxD,WAAO,IAAI,OAAO,MAAM,MAAM,EAAE,KAAKD,SAAQ;AAAA,EAC/C;AAEA,oBAAO,MAAM,KAAK;AAClB,QAAM,eAAW,sBAAAC,SAAe,KAAK;AACrC,SAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AACtC;",
  "names": ["SuccessSingularFormatter", "response", "ErrorFormatter"]
}
