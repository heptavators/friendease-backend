{
  "version": 3,
  "sources": ["../../../src/controllers/Auth/index.ts"],
  "sourcesContent": ["import { AuthService } from \"../../services/Auth\";\r\nimport { AuthRepository } from \"../../repositories/Auth\";\r\nimport { Request, Response } from \"express-serve-static-core\";\r\nimport { ParsedQs } from \"qs\";\r\nimport { logger } from \"../../helpers/Log\";\r\nimport ErrorFormatter from \"../../helpers/Response/ErrorFormatter\";\r\nimport SuccessSingularFormatter from '../../helpers/Response/SuccessSingularFormatter';\r\nimport FailFormatter from '../../helpers/Response/FailFormatter';\r\nimport { Login  as LoginRequest } from '../../domains/web/Login';\r\nimport { Validator } from '../../helpers/Validator';\r\n\r\n\r\n\r\nexport class Auth {\r\n    authService: AuthService\r\n\r\n    constructor(authService: AuthService, authRepository: AuthRepository){\r\n        this.authService = new AuthService(authRepository)\r\n    }\r\n\r\n\r\n    \r\n    async signInController(req: Request, res: Response) {\r\n      try {\r\n\r\n        const data: LoginRequest = req.body as LoginRequest\r\n        const validate: LoginRequest = Validator.validate(data, LoginRequest.getSchema());\r\n          if (JSON.stringify(validate) === JSON.stringify(data)) {\r\n            const result = await this.authService.SignInService(validate)\r\n            if (result){\r\n              const response = SuccessSingularFormatter(\"Berhasil Login\", {token: result})\r\n              res.status(200).send(response)\r\n    \r\n            }else {\r\n              const response = FailFormatter(\"Pengguna Tidak Ditemukan\");\r\n              res.status(404).send(response)    \r\n            }\r\n          } else {\r\n            const response = ErrorFormatter(JSON.stringify(validate));\r\n            res.status(422).json(response);\r\n        }\r\n\r\n      } catch (error: any) {\r\n        const response = ErrorFormatter(error.message);\r\n        logger.error(error);\r\n        res.status(500).send(response);\r\n      }\r\n\r\n\r\n  }\r\n\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA4B;AAI5B,iBAAuB;AACvB,4BAA2B;AAC3B,sCAAqC;AACrC,2BAA0B;AAC1B,mBAAuC;AACvC,uBAA0B;AAInB,MAAM,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,aAA0B,gBAA+B;AACjE,SAAK,cAAc,IAAI,wBAAY,cAAc;AAAA,EACrD;AAAA,EAIA,MAAM,iBAAiB,KAAc,KAAe;AAClD,QAAI;AAEF,YAAM,OAAqB,IAAI;AAC/B,YAAM,WAAyB,2BAAU,SAAS,MAAM,aAAAA,MAAa,UAAU,CAAC;AAC9E,UAAI,KAAK,UAAU,QAAQ,MAAM,KAAK,UAAU,IAAI,GAAG;AACrD,cAAM,SAAS,MAAM,KAAK,YAAY,cAAc,QAAQ;AAC5D,YAAI,QAAO;AACT,gBAAM,eAAW,gCAAAC,SAAyB,kBAAkB,EAAC,OAAO,OAAM,CAAC;AAC3E,cAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,QAE/B,OAAM;AACJ,gBAAM,eAAW,qBAAAC,SAAc,0BAA0B;AACzD,cAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,QAC/B;AAAA,MACF,OAAO;AACL,cAAM,eAAW,sBAAAC,SAAe,KAAK,UAAU,QAAQ,CAAC;AACxD,YAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,MACjC;AAAA,IAEF,SAAS,OAAY;AACnB,YAAM,eAAW,sBAAAA,SAAe,MAAM,OAAO;AAC7C,wBAAO,MAAM,KAAK;AAClB,UAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAC/B;AAAA,EAGJ;AAEF;",
  "names": ["LoginRequest", "SuccessSingularFormatter", "FailFormatter", "ErrorFormatter"]
}
