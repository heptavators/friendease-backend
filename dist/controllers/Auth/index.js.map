{
  "version": 3,
  "sources": ["../../../src/controllers/Auth/index.ts"],
  "sourcesContent": ["import { AuthService } from \"../../services/Auth\";\nimport { Request, Response } from \"express-serve-static-core\";\nimport { logger } from \"../../helpers/Log\";\nimport ErrorFormatter from \"../../helpers/Response/ErrorFormatter\";\nimport SuccessSingularFormatter from '../../helpers/Response/SuccessSingularFormatter';\nimport { LoginRequest } from '../../domains/web/Login/LoginRequest';\nimport { ValidationException, Validator } from '../../helpers/Validator';\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\nimport { RegisterRequest } from \"../../domains/web/Login/RegisterRequest\";\nimport { HandleErrorResponse } from \"../../helpers/Error/HandleErrorResponse\";\n\nexport class AuthController {\n    authService: AuthService\n\n    constructor(authService: AuthService){\n        this.authService = authService\n    }\n\n    async LoginController(req: Request, res: Response) {\n      try {\n        const data = req.body as LoginRequest;\n        const validatedData = Validator.validate(data, LoginRequest.getSchema());\n        const result = await this.authService.SignInService(validatedData);\n\n        const response = SuccessSingularFormatter('Berhasil Login', { token: result });\n\n        return res.status(200).send(response);\n\n      } catch (error: any) {\n        return HandleErrorResponse(res, error);\n      } \n    }\n\n    async ProfileController(req: Request, res: Response) {\n      try {\n        const result = await this.authService.GetProfileService(req.authId);\n\n        const response = SuccessSingularFormatter('Profile User', result);\n\n        return res.status(200).send(response);\n\n      } catch (error: any) {\n        return HandleErrorResponse(res, error);\n      } \n    }\n\n\n    async RegisterController(req: Request, res: Response){\n      try {\n        const data = req.body as RegisterRequest;\n        const validatedData = Validator.validate(data, RegisterRequest.getSchema());\n        const result = await this.authService.RegisterService(validatedData);\n\n        const response = SuccessSingularFormatter('Berhasil Register Akun', result );\n\n        return res.status(200).send(response);\n\n      } catch (error) {\n        return HandleErrorResponse(res, error);\n      }\n    }\n  \n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,sCAAqC;AACrC,0BAA6B;AAC7B,uBAA+C;AAE/C,6BAAgC;AAChC,iCAAoC;AAE7B,MAAM,eAAe;AAAA,EACxB;AAAA,EAEA,YAAY,aAAyB;AACjC,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,MAAM,gBAAgB,KAAc,KAAe;AACjD,QAAI;AACF,YAAM,OAAO,IAAI;AACjB,YAAM,gBAAgB,2BAAU,SAAS,MAAM,iCAAa,UAAU,CAAC;AACvE,YAAM,SAAS,MAAM,KAAK,YAAY,cAAc,aAAa;AAEjE,YAAM,eAAW,gCAAAA,SAAyB,kBAAkB,EAAE,OAAO,OAAO,CAAC;AAE7E,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAY;AACnB,iBAAO,gDAAoB,KAAK,KAAK;AAAA,IACvC;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,KAAc,KAAe;AACnD,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,YAAY,kBAAkB,IAAI,MAAM;AAElE,YAAM,eAAW,gCAAAA,SAAyB,gBAAgB,MAAM;AAEhE,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAY;AACnB,iBAAO,gDAAoB,KAAK,KAAK;AAAA,IACvC;AAAA,EACF;AAAA,EAGA,MAAM,mBAAmB,KAAc,KAAc;AACnD,QAAI;AACF,YAAM,OAAO,IAAI;AACjB,YAAM,gBAAgB,2BAAU,SAAS,MAAM,uCAAgB,UAAU,CAAC;AAC1E,YAAM,SAAS,MAAM,KAAK,YAAY,gBAAgB,aAAa;AAEnE,YAAM,eAAW,gCAAAA,SAAyB,0BAA0B,MAAO;AAE3E,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAO;AACd,iBAAO,gDAAoB,KAAK,KAAK;AAAA,IACvC;AAAA,EACF;AAGJ;",
  "names": ["SuccessSingularFormatter"]
}
