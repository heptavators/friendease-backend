{
  "version": 3,
  "sources": ["../../../src/controllers/Auth/index.ts"],
  "sourcesContent": ["import { AuthService } from \"../../services/Auth\";\r\nimport { AuthRepository } from \"../../repositories/Auth\";\r\nimport { Request, Response } from \"express-serve-static-core\";\r\nimport { ParsedQs } from \"qs\";\r\nimport { logger } from \"../../helpers/Log\";\r\nimport ErrorFormatter from \"../../helpers/Response/ErrorFormatter\";\r\nimport SuccessSingularFormatter from '../../helpers/Response/SuccessSingularFormatter';\r\nimport FailFormatter from '../../helpers/Response/FailFormatter';\r\nimport { Login  as LoginRequest } from '../../domains/web/Login';\r\nimport { ValidationException, Validator } from '../../helpers/Validator';\r\nimport ErrorInputFormatter from \"../../helpers/Response/ErrorInputFormatter\";\r\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\r\nimport { BaseError } from \"../../helpers/Error/BaseError\";\r\n\r\n\r\n\r\nexport class Auth {\r\n    authService: AuthService\r\n\r\n    constructor(authService: AuthService, authRepository: AuthRepository){\r\n        this.authService = new AuthService(authRepository)\r\n    }\r\n\r\n\r\n    \r\n    async signInController(req: Request, res: Response) {\r\n      try {\r\n        const data: LoginRequest = req.body as LoginRequest;\r\n        const validatedData = Validator.validate(data, LoginRequest.getSchema());\r\n    \r\n        const result = await this.authService.SignInService(validatedData);\r\n        const response = SuccessSingularFormatter('Berhasil Login', { token: result });\r\n\r\n        return res.status(200).send(response);\r\n\r\n      } catch (error: any) {\r\n        // logger.error(error)\r\n        if (error instanceof BaseError){\r\n          const response = ErrorFormatter(error.message)\r\n          return res.status(error.statusCode).send(response)\r\n  \r\n        }\r\n\r\n        const response = ErrorFormatter(error)\r\n        return res.status(500).send(response)\r\n\r\n\r\n          // if (error instanceof ValidationException) {\r\n          //   const formattedErrors = error.errors.map((err) => ({ error: err.error, message: err.message }));\r\n          //   const response =  (formattedErrors)\r\n            \r\n          //   res.status(422).send(response);\r\n\r\n          // }else if (error instanceof BadRequestError){\r\n\r\n          //   const formattedErrors = error.errors.map((err) => ({ error: err.error, message: err.message }));\r\n          //   const response = ErrorInputFormatter(formattedErrors)\r\n            \r\n          //   res.status(400).send(response);\r\n\r\n          // }else {\r\n          //   const response = ErrorFormatter(error)\r\n          //   logger.error(error)\r\n          //   res.status(500).send(response)\r\n          // }\r\n      \r\n    } \r\n      \r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA4B;AAK5B,4BAA2B;AAC3B,sCAAqC;AAErC,mBAAuC;AACvC,uBAA+C;AAG/C,uBAA0B;AAInB,MAAM,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,aAA0B,gBAA+B;AACjE,SAAK,cAAc,IAAI,wBAAY,cAAc;AAAA,EACrD;AAAA,EAIA,MAAM,iBAAiB,KAAc,KAAe;AAClD,QAAI;AACF,YAAM,OAAqB,IAAI;AAC/B,YAAM,gBAAgB,2BAAU,SAAS,MAAM,aAAAA,MAAa,UAAU,CAAC;AAEvE,YAAM,SAAS,MAAM,KAAK,YAAY,cAAc,aAAa;AACjE,YAAM,eAAW,gCAAAC,SAAyB,kBAAkB,EAAE,OAAO,OAAO,CAAC;AAE7E,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAY;AAEnB,UAAI,iBAAiB,4BAAU;AAC7B,cAAMC,gBAAW,sBAAAC,SAAe,MAAM,OAAO;AAC7C,eAAO,IAAI,OAAO,MAAM,UAAU,EAAE,KAAKD,SAAQ;AAAA,MAEnD;AAEA,YAAM,eAAW,sBAAAC,SAAe,KAAK;AACrC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAsBxC;AAAA,EAEA;AACJ;",
  "names": ["LoginRequest", "SuccessSingularFormatter", "response", "ErrorFormatter"]
}
