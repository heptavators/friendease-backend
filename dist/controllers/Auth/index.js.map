{
  "version": 3,
  "sources": ["../../../src/controllers/Auth/index.ts"],
  "sourcesContent": ["import { AuthService } from \"../../services/Auth\";\nimport { AuthRepository } from \"../../repositories/Auth\";\nimport { Request, Response } from \"express-serve-static-core\";\nimport { logger } from \"../../helpers/Log\";\nimport ErrorFormatter from \"../../helpers/Response/ErrorFormatter\";\nimport SuccessSingularFormatter from '../../helpers/Response/SuccessSingularFormatter';\nimport { Login  as LoginRequest } from '../../domains/web/Login';\nimport { Validator } from '../../helpers/Validator';\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\n\nexport class Auth {\n    authService: AuthService\n\n    constructor(authService: AuthService, authRepository: AuthRepository){\n        this.authService = new AuthService(authRepository)\n    }\n\n    async signInController(req: Request, res: Response) {\n      try {\n        const data: LoginRequest = req.body as LoginRequest;\n        const validatedData = Validator.validate(data, LoginRequest.getSchema());\n    \n        const result = await this.authService.SignInService(validatedData);\n        const response = SuccessSingularFormatter('Berhasil Login', { token: result });\n\n        return res.status(200).send(response);\n\n      } catch (error: any) {\n        if (error instanceof BadRequestError) {\n            const response = ErrorFormatter(error.toResponseObject())\n            return res.status(error.status).send(response);\n        }\n        logger.error(error)\n        const response = ErrorFormatter(error);\n        return res.status(500).send(response);\n      } \n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA4B;AAG5B,iBAAuB;AACvB,4BAA2B;AAC3B,sCAAqC;AACrC,mBAAuC;AACvC,uBAA0B;AAC1B,6BAAgC;AAEzB,MAAM,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,aAA0B,gBAA+B;AACjE,SAAK,cAAc,IAAI,wBAAY,cAAc;AAAA,EACrD;AAAA,EAEA,MAAM,iBAAiB,KAAc,KAAe;AAClD,QAAI;AACF,YAAM,OAAqB,IAAI;AAC/B,YAAM,gBAAgB,2BAAU,SAAS,MAAM,aAAAA,MAAa,UAAU,CAAC;AAEvE,YAAM,SAAS,MAAM,KAAK,YAAY,cAAc,aAAa;AACjE,YAAM,eAAW,gCAAAC,SAAyB,kBAAkB,EAAE,OAAO,OAAO,CAAC;AAE7E,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAY;AACnB,UAAI,iBAAiB,wCAAiB;AAClC,cAAMC,gBAAW,sBAAAC,SAAe,MAAM,iBAAiB,CAAC;AACxD,eAAO,IAAI,OAAO,MAAM,MAAM,EAAE,KAAKD,SAAQ;AAAA,MACjD;AACA,wBAAO,MAAM,KAAK;AAClB,YAAM,eAAW,sBAAAC,SAAe,KAAK;AACrC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IACtC;AAAA,EACF;AACJ;",
  "names": ["LoginRequest", "SuccessSingularFormatter", "response", "ErrorFormatter"]
}
