{
  "version": 3,
  "sources": ["../../../src/controllers/Auth/index.ts"],
  "sourcesContent": ["import { AuthService } from \"../../services/Auth\";\r\nimport { Request, Response } from \"express-serve-static-core\";\r\nimport { logger } from \"../../helpers/Log\";\r\nimport ErrorFormatter from \"../../helpers/Response/ErrorFormatter\";\r\nimport SuccessSingularFormatter from '../../helpers/Response/SuccessSingularFormatter';\r\nimport { Login  as LoginRequest } from '../../domains/web/Login';\r\nimport { ValidationException, Validator } from '../../helpers/Validator';\r\nimport { BadRequestError } from \"../../helpers/Error/BadRequestError\";\r\n\r\nexport class Auth {\r\n    authService: AuthService\r\n\r\n    constructor(authService: AuthService){\r\n        this.authService = authService\r\n    }\r\n\r\n    async signInController(req: Request, res: Response) {\r\n      try {\r\n        const data: LoginRequest = req.body as LoginRequest;\r\n        const validatedData = Validator.validate(data, LoginRequest.getSchema());\r\n        const result = await this.authService.SignInService(validatedData);\r\n\r\n        // const comparePassword = bcryptjs.compareSync(validatedData.password, result.password)\r\n        // console.log(result.password)\r\n        // if (!comparePassword) {\r\n        //     throw new BadRequestError([{ error: 'password', message: 'Password Salah' }], 401);\r\n        // }\r\n\r\n        // return user\r\n\r\n        const response = SuccessSingularFormatter('Berhasil Login', { token: result });\r\n\r\n        return res.status(200).send(response);\r\n\r\n      } catch (error: any) {\r\n        handleErrorResponse(res, error)\r\n      } \r\n    }\r\n\r\n  }\r\n\r\n  \r\nconst handleErrorResponse = (res: Response, error: any) => {\r\n  if (error instanceof BadRequestError || error instanceof ValidationException) {\r\n    const response = ErrorFormatter(error.toResponseObject());\r\n    return res.status(error.status).send(response);\r\n  }\r\n\r\n  logger.error(error);\r\n  const response = ErrorFormatter(error);\r\n  return res.status(500).send(response);\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAuB;AACvB,4BAA2B;AAC3B,sCAAqC;AACrC,mBAAuC;AACvC,uBAA+C;AAC/C,6BAAgC;AAEzB,MAAM,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,aAAyB;AACjC,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,MAAM,iBAAiB,KAAc,KAAe;AAClD,QAAI;AACF,YAAM,OAAqB,IAAI;AAC/B,YAAM,gBAAgB,2BAAU,SAAS,MAAM,aAAAA,MAAa,UAAU,CAAC;AACvE,YAAM,SAAS,MAAM,KAAK,YAAY,cAAc,aAAa;AAUjE,YAAM,eAAW,gCAAAC,SAAyB,kBAAkB,EAAE,OAAO,OAAO,CAAC;AAE7E,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,IAEtC,SAAS,OAAY;AACnB,0BAAoB,KAAK,KAAK;AAAA,IAChC;AAAA,EACF;AAEF;AAGF,MAAM,sBAAsB,CAAC,KAAe,UAAe;AACzD,MAAI,iBAAiB,0CAAmB,iBAAiB,sCAAqB;AAC5E,UAAMC,gBAAW,sBAAAC,SAAe,MAAM,iBAAiB,CAAC;AACxD,WAAO,IAAI,OAAO,MAAM,MAAM,EAAE,KAAKD,SAAQ;AAAA,EAC/C;AAEA,oBAAO,MAAM,KAAK;AAClB,QAAM,eAAW,sBAAAC,SAAe,KAAK;AACrC,SAAO,IAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AACtC;",
  "names": ["LoginRequest", "SuccessSingularFormatter", "response", "ErrorFormatter"]
}
