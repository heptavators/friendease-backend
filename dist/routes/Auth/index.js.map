{
  "version": 3,
  "sources": ["../../../src/routes/Auth/index.ts"],
  "sourcesContent": ["import express, { Router } from 'express';\nimport { Auth as AuthController } from \"../../controllers/Auth\";\nimport { AuthRepository } from \"../../repositories/Auth\";\nimport { AuthService } from \"../../services/Auth\";\n\nimport ErrorFormatter from '../../helpers/Response/ErrorFormatter';\nimport FailFormatter from '../../helpers/Response/FailFormatter';\nimport { logger } from '../../helpers/Log';\nimport  Multer  from 'multer';\n\nconst multer = Multer({\n    storage: Multer.memoryStorage(),\n    limits: {\n      fileSize: 50 * 1024 * 1024, \n    },\n});\nconst authRouter = Router();\nconst authRepository = new AuthRepository();\nconst authService = new AuthService(authRepository);\n\n\nconst authController = new AuthController(authService, authRepository);\n\n\n\nauthRouter.post(\"/login\", async (req, res) => authController.signInController(req, res));\n\n\n// router.get(\"/user\", async function(req, res){\n//     let {name, page } = req.query as any\n//     try {\n        \n//         page = req.query.page || 1; \n//         const data = await authController.find(name, page)\n//         const count = await authController.count(name)\n//         const totalPage = Math.ceil(count / 10)\n\n\n//         if (data.length != 0){\n//             const meta = {\n//                 currentPage: page,\n//                 totalPage: totalPage,\n//                 totalItems: count,\n//                 itemPerPage: 10\n//             }\n//             const response = SuccessFormatter(\"Data Semua Pengguna\", meta, data)\n//             res.status(200).send(response)\n//         }else {\n//             const response = FailFormatter(\"Pengguna Tidak Ditemukan\");\n//             res.status(404).send(response)\n//         }\n\n//     } catch (error: any) {  \n//         const response = ErrorFormatter(error)\n//         logger.error(error)\n//         res.status(500).send(response)\n//     }\n// });\n\n    // try {\n    //     const data: LoginRequest = req.body as LoginRequest\n    //     const validate: LoginRequest = Validator.validate(data, LoginRequest.getSchema());\n    //     console.log(validate)\n\n    //     if (JSON.stringify(validate) === JSON.stringify(data)) {\n    //         res.status(200).json({ message: \"omke\" });\n    //     } else {\n    //         const response = ErrorFormatter(JSON.stringify(validate));\n    //         res.status(422).json(response);\n    //     }\n    // } catch (error: any) {\n    //     const response = ErrorFormatter(error)\n    //     logger.error(error)\n    //     res.status(500).send(response)\n    // }\n\n\nauthRouter.post(\"/image\", multer.single(\"image\"), async function(req, res) {\n    try {\n        console.log(req.file)\n\n        const response = FailFormatter(\"Login\");\n        res.status(200).send(response)\n    } catch (error: any) {\n        const response = ErrorFormatter(error)\n        logger.error(error)\n        res.status(500).send(response)\n    }\n});\n\nexport default authRouter"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgC;AAChC,kBAAuC;AACvC,IAAAA,eAA+B;AAC/B,IAAAA,eAA4B;AAE5B,4BAA2B;AAC3B,2BAA0B;AAC1B,iBAAuB;AACvB,oBAAqB;AAErB,MAAM,aAAS,cAAAC,SAAO;AAAA,EAClB,SAAS,cAAAA,QAAO,cAAc;AAAA,EAC9B,QAAQ;AAAA,IACN,UAAU,KAAK,OAAO;AAAA,EACxB;AACJ,CAAC;AACD,MAAM,iBAAa,uBAAO;AAC1B,MAAM,iBAAiB,IAAI,4BAAe;AAC1C,MAAM,cAAc,IAAI,yBAAY,cAAc;AAGlD,MAAM,iBAAiB,IAAI,YAAAC,KAAe,aAAa,cAAc;AAIrE,WAAW,KAAK,UAAU,OAAO,KAAK,QAAQ,eAAe,iBAAiB,KAAK,GAAG,CAAC;AAoDvF,WAAW,KAAK,UAAU,OAAO,OAAO,OAAO,GAAG,eAAe,KAAK,KAAK;AACvE,MAAI;AACA,YAAQ,IAAI,IAAI,IAAI;AAEpB,UAAM,eAAW,qBAAAC,SAAc,OAAO;AACtC,QAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,EACjC,SAAS,OAAY;AACjB,UAAM,eAAW,sBAAAC,SAAe,KAAK;AACrC,sBAAO,MAAM,KAAK;AAClB,QAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,EACjC;AACJ,CAAC;AAED,IAAO,eAAQ;",
  "names": ["import_Auth", "Multer", "AuthController", "FailFormatter", "ErrorFormatter"]
}
